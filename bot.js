// bot.js ‚Äî NUMNet Telegram Bot Engine
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const config = require('./config.json');

const bot = new TelegramBot(config.telegram.token, { polling: true });

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, `üëã –ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NUMNet. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`);
});

// –í—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞
bot.onText(/\/grant (.+)/, (msg, match) => {
  const userId = msg.chat.id;
  const tokenName = match[1];
  if (config.admin.includes(userId.toString())) {
    config.granted[userId] = tokenName;
    fs.writeFileSync('config.json', JSON.stringify(config, null, 2));
    bot.sendMessage(userId, `‚úÖ –¢–æ–∫–µ–Ω ${tokenName} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω.`);
  } else {
    bot.sendMessage(userId, `‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ç–æ–∫–µ–Ω–æ–≤.`);
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
bot.onText(/\/token/, (msg) => {
  const userId = msg.chat.id;
  const token = config.granted[userId];
  if (token) {
    bot.sendMessage(userId, `üîê –í–∞—à —Ç–æ–∫–µ–Ω: ${token}`);
  } else {
    bot.sendMessage(userId, `üîì –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞.`);
  }
});

// –ü–æ–∫–∞–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏
bot.onText(/\/license/, (msg) => {
  bot.sendMessage(msg.chat.id, `üìú NUMNet –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ BUSL-1.1. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://github.com/chob1t/Reflex-Identity-Network-/blob/main/LICENSE.md`);
});

// –ö–æ—à–µ–ª—ë–∫
bot.onText(/\/wallet/, (msg) => {
  const text = `üí∏ –ê–¥—Ä–µ—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\nTRX: ${config.wallet.trx}\nETH: ${config.wallet.eth}`;
  bot.sendMessage(msg.chat.id, text);
});
// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å –¥–µ–ø–ª–æ—è
const { exec } = require('child_process');

bot.onText(/\/deploy_contract/, (msg) => {
  const userId = msg.chat.id;
  if (config.admin.includes(userId.toString())) {
    bot.sendMessage(userId, `üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ NUMNet –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...`);
    
    exec('node deploy_contract.js', (error, stdout, stderr) => {
      if (error) {
        bot.sendMessage(userId, `‚õî –û—à–∏–±–∫–∞: ${error.message}`);
        return;
      }
      if (stderr) {
        bot.sendMessage(userId, `‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${stderr}`);
      }
      bot.sendMessage(userId, `‚úÖ –û—Ç–≤–µ—Ç:\n${stdout}`);
    });
  } else {
    bot.sendMessage(userId, `‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤.`);
  }
});

